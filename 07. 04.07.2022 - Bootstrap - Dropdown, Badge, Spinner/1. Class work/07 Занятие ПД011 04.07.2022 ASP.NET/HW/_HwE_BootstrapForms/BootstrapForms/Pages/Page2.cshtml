@page
@model BootstrapForms.Pages.Page2Model
@{
    ViewBag.Title = "Страница 2";
    ViewBag.Active = "Page2";
    ViewBag.Header = "Обработка коллекции плоских геометрических фигур";

    // TODO: вынести повторяющиеся функции в общий класс
    // подсветить кнопку, в ответ на клик по которой выполняется обработка
    string Active(string mode) => (string)ViewData["Mode"] == mode ? "" : "outline-";

    // вывод названия фигуры по ее типу
    string RenderName(string figType) => figType switch
    {
        "square" => "Квадрат",
        "rectangle" => "Прямоугольник",
        _ => "Треугольник",
    };
}

@* Дополнительные пункты меню - обработчики для страницы *@
@section PageProcessing {
    
    @* Рендерить форму и дополнительные пункты навигационного меню
       только если не требуется рендерить форму ввода параметров фигуры
    *@
    @if (!Model.RenderParamForm) {
        <hr />
        @* форма с элементом выбора типа фигуры и кнопкой добавить *@
        <form class="mb-3" mode="post" asp-page="/Page2" asp-page-handler="CreateFigure">
            <div class="form-floating mb-3">
                <select class="form-select" id="type" name="figType">
                    <option value="triangle">Треугольник</option>
                    <option value="square">Квадрат</option>
                    <option value="rectangle">Прямоугольник</option>
                </select>
                <label for="type" class="form-label">Тип фигуры:</label>
            </div>
            <button class="btn btn-success" type="submit"
                    title="Добавление фигуры в коллекцию">
                Добавить фигуру
            </button>
        </form>

        <!-- вертикальная группа кнопок - навигационных ссылок -->
        <div class="btn-group-vertical gap-3">
            @* обрабатываемый в данный момент режим выделяем стилем *@
            <a class="btn btn-@Active("source")secondary" asp-page="/Page2"
               title="Вывод всей коллекции в исходном порядке">
                Исходный набор
            </a>
            <a class="btn btn-@Active("squares")secondary" asp-page="/Page2" asp-page-handler="SquaresOnly"
               title="Вывод только квадратов, упорядоченных по убыванию площади">
                Только квадраты
            </a>
            <a class="btn btn-@Active("rectangles")secondary" asp-page="/Page2" asp-page-handler="RectanglesOnly"
               title="Вывод только прямоугольников, упорядоченных по возрастанию периметров">
                Только прямоугольники
            </a>
            <a class="btn btn-@Active("triangles")secondary" asp-page="/Page2" asp-page-handler="TrianglesOnly"
               title="Вывод только треугольников, в обратном порядке, по отношению к порядку в коллекции">
                Только треугольники
            </a>
            <a class="btn btn-@Active("areas")secondary" asp-page="/Page2" asp-page-handler="OrderByAreaDesc"
               title="Вывод всей коллекции по убыванию площади">
                По убыванию площади
            </a>
            <a class="btn btn-@Active("types")secondary" asp-page="/Page2" asp-page-handler="OrderByFigType"
               title="Вывод всей коллекции, упорядоченной по типу фигур">
                По типу фигур
            </a>
        </div>
    }
}

    @* Контент страницы *@
    <details>
        <summary><b>Страница 2.</b> @ViewBag.Header</summary>
        <p>
            Требуется хранить в файле формата JSON в папке App_Data 
            проекта коллекцию плоских геометрических фигур: квадраты, прямоугольники, 
            разносторонние треугольники. Инициализация коллекции должна проводиться при 
            отсутствии файла (формируйте не менее 10 фигур).  
        </p>
        <p>
            В форме на странице выбирайте тип фигуры, и по кнопке «Создать» формируйте 
            еще одну форму (на этой же странице) для ввода параметров фигуры. При рендеринге 
            формы для параметров форму для выбора типа фигуры рендерить не надо. Все формы 
            должны быть стилизованы классами Bootstrap. 
        </p>
        <p>
            Отображайте коллекцию на этой же странице в таблице, стилизованной классами Bootstrap 
            (в ячейке таблицы также выводите изображение фигуры).
        </p>
        <p>
            По ссылкам на этой странице (кнопкам в стиле Bootstrap) вызывайте 
            обработчики запросов GET:
        </p>
        <ul>
            <li>вывод всей коллекции в исходном порядке</li>
            <li>вывод только квадратов, по убыванию площади</li>
            <li>вывод только прямоугольников, по возрастанию периметра</li>
            <li>вывод только треугольников, в обратном порядке по отношению 
                к порядку в коллекции</li>
            <li>вывод всей коллекции по убыванию площади</li>
            <li>вывод всей коллекции, упорядоченной по типу фигур</li>
        </ul>

    </details>

    @* Ренедрится или форма ввода параметров добавляемой фигуры или таблица с коллекцией фигур*@
    @if (Model.RenderParamForm)
    {
        @* т.к. обработчик формы ожидает все три поля (a,b, c), а в конкретной 
        модели могут быть не все, то ренедерим все три поля, но отображаем только те,
        которые есть вмодели
         *@
        <h3>@RenderName(Model.FigType) - ввод параметров фигуры</h3>
        <form asp-page="/Page2" asp-page-handler="SetFigParam" class="p-3 w-25">
            @*  невидимое поле с типом фигуры *@
            <input type="hidden" name="figType" value="@Model.FigType"/>
            
            @* поля ввода значений сторон фигур, размеры фигур *@
            <div class="form-floating mt-3 mb-3">
                <input type="number" class="form-control" id="a" placeholder="сторона A" name="a" value="1">
                <label for="a">Сторона A:</label>
            </div>

            @* выводить блок элементов ввода только если поле присутствует в модели *@
            <div class="form-floating mt-3 mb-3 @(Model.FigType != "square" ? "" : "d-none")">
                <input type="number" class="form-control" id="b" placeholder="сторона B" name="b" value="1">
                <label for="b">Сторона B:</label>
            </div>

            @* выводить блок элементов ввода только если поле присутствует в модели *@
            <div class="form-floating mt-3 mb-3 @(Model.FigType == "triangle" ? "" : "d-none")">
                <input type="number" class="form-control" id="c" placeholder="сторона C" name="c" value="1">
                <label for="c">Сторона C:</label>
            </div>

            <button type="submit" class="btn btn-primary">Сохранить</button>
        </form>
    }
    else
    {
        <table class="table table-striped table-hover">
            <thead>
            <tr>
                <th>Номер</th>
                <th>Тип фигуры</th>
                <th>Изображение фигуры</th>
                <th>Размеры фигуры</th>
                <th>Периметр фигуры</th>
                <th>Площадь фигуры</th>
            </tr>
            </thead>
            <tbody>
            @{
                // номер строки таблицы для вывода
                var row = 1;
                foreach (var figure in Model.Figures)
                {
                    <tr>
                        <td>@(row++)</td>
                        <td>@figure.Type</td>
                        <td class="text-center"><img src="~/images/task02/@(figure.Image)"/></td>
                        <td>@figure</td>
                        <td>@($"{figure.Perimeter():f3}")</td>
                        <td>@($"{figure.Area():f3}")</td>
                    </tr>
                }
            }
            </tbody>
        </table>
    }

