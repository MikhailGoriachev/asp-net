@page
@model HomeWork.Pages.IndexModel
@{
    // индекс страницы
    ViewBag.indexTab = 0;

    // название страницы
    ViewData["Header"] = "Главная";
}

<article>
    <!-- #region Теоретическая часть -->
    <details open>
        <summary>
            <h2>Теоретическая часть</h2>
        </summary>

        <ul>
            <li>Формирование блоков текста в Razor, директива <b>@@:</b></li>
            <li>Локальные функции на странице Razor, директива <b>@@functions {}</b></li>
            <li>Обработка исключений при рендеринге разметки Razor Pages, директива <b>@@try … catch… finally</b></li>
            <li>Получение данных из формы методом <b>POST</b></li>
            <li>Сопоставление полей ввода и параметров метода OnPost() в коде модели формы</li>
            <li>Ввод объекта</li>
            <li>Ввод массива значимых данных, в том числе string</li>
            <li>Ввод массива объектов</li>
            <li>Ввод словаря</li>
            <li>Ввод без передачи параметров в OnPut(), с использованием контекста запроса</li>
        </ul>
    </details>
    <!-- #endregion -->

    <!-- #region Практическая часть -->
    <details open>
        <summary>
            <h2>Практическая часть</h2>
        </summary>

        <p>
            Разработайте приложение ASP.NET Core, состоящее из нескольких страниц Razor Pages. На каждой странице
            разместите решение одной задачи, на главной странице (<b>Index.cshtml</b>) разместите задание на разработку.
            Во
            всех формах <b>валидация не требуется</b>.
        </p>

        <!-- #region Задача 1-->
        <p>
            <b>Задача 1.</b> Имя страницы <b>Book.cshtml</b>. В ответ на GET-запрос клиента /Book выводите представление
            с
            формой для ввода сведений о книге (используйте модель): автор, название, год издания, цена. Метод обработки
            формы – POST, данные книги выводите на этой же странице.
        </p>
        <!-- #endregion -->

        <!-- #region Задача 2 -->
        <p>
            <b>Задача 2.</b> Имя страницы <b>SailingFleet.cshtml</b>. В ответ на GET-запрос клиента <b>/SailingFleet</b>
            сформировать
            представление с формой для ввода в массив сведений о трех парусных кораблях (длина в метрах, ширина в
            метрах, водоизмещение в тоннах, название, год постройки, изображение): линейный корабль «Виктория», чайный
            клиппер «Катти Сарк» и барк «Крузенштерн». Используйте модель, коллекцию. Изображение задавайте
            присваиванием заранее известного имени файла в соответствующее поле элемента массива (хард-код). Метод
            обработки формы – POST, массив выводите на этой же странице.
        </p>
        <!-- #endregion -->

        <!-- #region Задача 3 -->
        <p>
            <b>Задача 3.</b> Имя страницы <b>Calculate.cshtml</b>. В ответ на Get-запрос клиента /Calculate сформировать
            представление с формой для ввода исходных данных для расчета по варианту 13 (уверен, Вы не суеверны 😊)
            лабораторной работы 1 из учебника Павловской Т.А. по C#:
        </p>

        <div class="content-center"><img src="~/images/variant13.png" alt="формулы"></div>

        <p>Метод обработки формы – POST, исходные данные и результаты расчета выводите на этой же странице.</p>
        <!-- #endregion -->
    </details>
    <!-- #endregion -->

    <!-- #region Дополнение -->
    <details open>
        <summary>
            <h2>Дополнение</h2>
        </summary>

        <p>
            Запись занятия можно скачать
            <a href="https://cloud.mail.ru/public/vgWX/D6SUvRKFZ" target="_blank">по этой ссылке</a>.
            Материалы занятия в этом же архиве.
        </p>
    </details>
    <!-- #endregion -->
</article>
